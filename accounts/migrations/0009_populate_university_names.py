# Generated by Django migration to populate university names

from django.db import migrations
import requests
import json


def populate_university_names(apps, schema_editor):
    """
    Populate the universidade_nome field for existing users
    by fetching data from the external API
    """
    CustomUser = apps.get_model('accounts', 'CustomUser')
    
    # Get users that have university ID but no university name
    users_without_name = CustomUser.objects.filter(
        universidade__isnull=False,
        universidade_nome__in=['Não informado', '', None]
    ).exclude(universidade='')
    
    if not users_without_name.exists():
        print("No users need university name updates")
        return
    
    try:
        # Fetch universities from API
        response = requests.get('http://localhost:3000/universidades', timeout=10)
        if response.status_code == 200:
            universidades = response.json()
            
            # Create a mapping from ID to name
            id_to_name = {}
            for uni in universidades:
                id_to_name[uni.get('id')] = uni.get('nome', 'Nome não encontrado')
            
            # Update users
            updated_count = 0
            for user in users_without_name:
                university_name = id_to_name.get(user.universidade)
                if university_name:
                    user.universidade_nome = university_name
                    user.save(update_fields=['universidade_nome'])
                    updated_count += 1
            
            print(f"Successfully updated {updated_count} users with university names")
            
        else:
            print(f"Failed to fetch universities: HTTP {response.status_code}")
            # Set a fallback value
            users_without_name.update(universidade_nome="Universidade não identificada")
            
    except Exception as e:
        print(f"Error fetching universities: {e}")
        # Set a default value for users without names
        users_without_name.update(universidade_nome="Universidade não identificada")


def reverse_populate_university_names(apps, schema_editor):
    """
    Reverse the population - set all university names back to default
    """
    CustomUser = apps.get_model('accounts', 'CustomUser')
    CustomUser.objects.all().update(universidade_nome='Não informado')


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0008_customuser_universidade_nome'),
    ]

    operations = [
        migrations.RunPython(
            populate_university_names,
            reverse_populate_university_names
        ),
    ]
